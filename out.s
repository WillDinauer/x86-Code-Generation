    # this assembly generated by the cs257 code generator
.globl _start
_start:
    callq main
    # taking main's return value and putting it in %rbx to act as program exit code
    movq %rax, %rbx
    # 1 is the linux interrupt code for exit
    movq $1, %rax
    # passing control to the kernel
    int $128
g:
    # function prologue for g
    pushq %rbp
    movq %rsp, %rbp
    # pushing callee-saved registers for start of g
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    # saving the argument to g
    movq %rdi, %rbx
    # Processing a comparison instruction
    movq %rbx, %rax
    cmp $0, %rax
    # Finished processing a comparison instruction
    je __g_block_3
    jne __g_block_4
__g_block_3:
    jmp __PHI_FROM___g_block_3_TO___g_block_5
__g_block_4:
    jmp __PHI_FROM___g_block_4_TO___g_block_5
__g_block_5:
__PHI_FROM___g_block_3_TO___g_block_5:
    movq $1, %rbx
    movq $1, %rcx
    jmp __PHI_DONE___g_block_5
__PHI_FROM___g_block_4_TO___g_block_5:
    movq $2, %rbx
    movq $2, %rcx
    jmp __PHI_DONE___g_block_5
__PHI_DONE___g_block_5:
    # Processing a binary operation
    movq %rbx, %rax
    add %rcx, %rax
    movq %rax, %rdx
    # Finished processing binary operation
    # sticking return value into %rax
    movq %rdx, %rax
    # popping callee-saved registers
    movq -40(%rbp), %r15
    movq -32(%rbp), %r14
    movq -24(%rbp), %r13
    movq -16(%rbp), %r12
    movq -8(%rbp), %rbx
    # tearing down the stack and returning
    leaveq
    retq
main:
    # function prologue for main
    pushq %rbp
    movq %rsp, %rbp
    # pushing callee-saved registers for start of main
    pushq %rbx
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %r15
    # pushing caller-saved registers before call to g
    pushq %rcx
    pushq %rdx
    pushq %rsi
    pushq %r8
    pushq %r9
    pushq %r10
    pushq %r11
    # passing argument to g in %rdi
    movq $8, %rdi
    # calling g
    callq g
    # popping caller-saved registers after call to g
    popq %r11
    popq %r10
    popq %r9
    popq %r8
    popq %rsi
    popq %rdx
    popq %rcx
    # saving the value returned from g
    movq %rax, %rbx
    # sticking return value into %rax
    movq %rbx, %rax
    # popping callee-saved registers
    movq -40(%rbp), %r15
    movq -32(%rbp), %r14
    movq -24(%rbp), %r13
    movq -16(%rbp), %r12
    movq -8(%rbp), %rbx
    # tearing down the stack and returning
    leaveq
    retq
